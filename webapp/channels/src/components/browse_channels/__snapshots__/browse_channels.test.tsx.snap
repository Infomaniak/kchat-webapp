// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/BrowseChannels should match snapshot and state 1`] = `
<BrowseChannels
  actions={
    Object {
      "closeModal": [MockFunction],
      "closeRightHandSide": [MockFunction],
      "getArchivedChannels": [MockFunction] {
        "calls": Array [
          Array [
            "team_1",
            0,
            100,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getChannels": [MockFunction] {
        "calls": Array [
          Array [
            "team_1",
            0,
            100,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getChannelsMemberCount": [MockFunction],
      "joinChannel": [MockFunction],
      "openModal": [MockFunction],
      "previewChannel": [MockFunction],
      "searchAllChannels": [MockFunction],
      "setGlobalItem": [MockFunction],
    }
  }
  archivedChannels={
    Array [
      Object {
        "create_at": 0,
        "creator_id": "id",
        "delete_at": 0,
        "display_name": "channel-2",
        "group_constrained": false,
        "header": "channel-2-header",
        "id": "channel_id_2",
        "last_post_at": 0,
        "last_root_post_at": 0,
        "name": "channel-2",
        "purpose": "channel-2-purpose",
        "scheme_id": "id",
        "team_id": "team_1",
        "type": "O",
        "update_at": 0,
      },
    ]
  }
  canShowArchivedChannels={true}
  channels={
    Array [
      Object {
        "create_at": 0,
        "creator_id": "id",
        "delete_at": 0,
        "display_name": "name",
        "group_constrained": false,
        "header": "header",
        "id": "channel_id",
        "last_post_at": 0,
        "last_root_post_at": 0,
        "name": "DN",
        "purpose": "purpose",
        "scheme_id": "id",
        "team_id": "team_id",
        "type": "O",
        "update_at": 0,
      },
    ]
  }
  channelsRequestStarted={false}
  currentPack="ksuite_essential"
  currentUserId="user-1"
  myChannelMemberships={
    Object {
      "channel-id-3": Object {
        "channel_id": "channel-id-3",
        "last_update_at": 0,
        "last_viewed_at": 0,
        "mention_count": 0,
        "mention_count_root": 0,
        "msg_count": 0,
        "msg_count_root": 0,
        "notify_props": Object {
          "channel_auto_follow_threads": "off",
          "desktop": "default",
          "email": "default",
          "ignore_channel_mentions": "default",
          "mark_unread": "all",
          "push": "default",
        },
        "roles": "channel_user",
        "scheme_admin": false,
        "scheme_user": true,
        "urgent_mention_count": 0,
        "user_id": "user-1",
      },
    }
  }
  privateChannels={
    Array [
      Object {
        "create_at": 0,
        "creator_id": "id",
        "delete_at": 0,
        "display_name": "channel-3",
        "group_constrained": false,
        "header": "channel-3-header",
        "id": "channel_id_3",
        "last_post_at": 0,
        "last_root_post_at": 0,
        "name": "channel-3",
        "purpose": "channel-3-purpose",
        "scheme_id": "id",
        "team_id": "team_1",
        "type": "P",
        "update_at": 0,
      },
    ]
  }
  shouldHideJoinedChannels={false}
  teamId="team_1"
  teamName="team_name"
  usageDeltas={
    Object {
      "private_channels": -1,
      "public_channels": -1,
    }
  }
/>
`;

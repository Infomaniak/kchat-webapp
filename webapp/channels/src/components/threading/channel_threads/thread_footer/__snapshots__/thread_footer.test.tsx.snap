// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/threading/channel_threads/thread_footer should match snapshot when a single message is followed 1`] = `
<Memo(ThreadFooter)
  threadId="singlemessageid"
>
  <div
    className="ThreadFooter"
  >
    <div
      className="indicator"
    />
    <Memo(FollowButton)
      className="separated"
      isFollowing={true}
      onClick={[Function]}
    >
      <Button
        className="separated FollowButton"
        disabled={false}
        isActive={true}
        onClick={[Function]}
      >
        <button
          className="Button Button___transparent is-active separated FollowButton"
          disabled={false}
          onClick={[Function]}
        >
          <span
            className="Button_label"
          >
            Following
          </span>
        </button>
      </Button>
    </Memo(FollowButton)>
  </div>
</Memo(ThreadFooter)>
`;

exports[`components/threading/channel_threads/thread_footer should report total number of replies 1`] = `
<Memo(ThreadFooter)
  threadId="postthreadid"
>
  <div
    className="ThreadFooter"
  >
    <div
      className="indicator"
    />
    <Memo(Avatars)
      size="sm"
      userIds={
        Array [
          "5",
          "4",
          "3",
          "2",
          "1",
        ]
      }
    >
      <div
        className="Avatars Avatars___sm"
      >
        <UserAvatar
          key="5"
          size="sm"
          style={
            Object {
              "background": "rgb(240, 240, 241)",
            }
          }
          userId="5"
        >
          <Connect(ProfilePopoverWcController)
            src="/api/v4/users/5/image?_=0"
            triggerComponentClass="style--none btn-round"
            userId="5"
          >
            <ProfilePopoverWcController
              channelId="current_channel_id"
              currentTeamName="team1"
              dispatch={[Function]}
              isChannelAdmin={false}
              isTeamAdmin={false}
              src="/api/v4/users/5/image?_=0"
              triggerComponentClass="style--none btn-round"
              user={
                Object {
                  "first_name": "First5",
                  "id": "5",
                  "last_name": "Last5",
                  "nickname": "nickname5",
                  "username": "first.last5",
                }
              }
              userId="5"
              userStatus="offline"
            >
              <wc-contact-sheet
                background-color="transparent"
                class="style--none btn-round"
                is-external={false}
                k-chat-team-name="team1"
                k-chat-user-name="first.last5"
                presence="offline"
                prevent-open-on-hover={true}
                prevent-stop-propagation={true}
                size="md"
                src="/api/v4/users/5/image?_=0"
                user-name="First5 Last5"
              >
                <span
                  className="style--none btn-round"
                  slot="trigger"
                >
                  <WithTooltip
                    title="first.last5"
                  >
                    <Avatar
                      onBlur={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onMouseLeave={[Function]}
                      onMouseMove={[Function]}
                      onPointerDown={[Function]}
                      onPointerEnter={[Function]}
                      size="sm"
                      style={
                        Object {
                          "background": "rgb(240, 240, 241)",
                        }
                      }
                      tabIndex={-1}
                      url="/api/v4/users/5/image?_=0"
                    >
                      <img
                        alt="user profile image"
                        className="Avatar Avatar-sm"
                        loading="lazy"
                        onBlur={[Function]}
                        onError={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseMove={[Function]}
                        onPointerDown={[Function]}
                        onPointerEnter={[Function]}
                        src="/api/v4/users/5/image?_=0"
                        style={
                          Object {
                            "background": "rgb(240, 240, 241)",
                          }
                        }
                        tabIndex={-1}
                      />
                    </Avatar>
                  </WithTooltip>
                </span>
              </wc-contact-sheet>
            </ProfilePopoverWcController>
          </Connect(ProfilePopoverWcController)>
        </UserAvatar>
        <UserAvatar
          key="4"
          size="sm"
          style={
            Object {
              "background": "rgb(240, 240, 241)",
            }
          }
          userId="4"
        >
          <Connect(ProfilePopoverWcController)
            src="/api/v4/users/4/image?_=0"
            triggerComponentClass="style--none btn-round"
            userId="4"
          >
            <ProfilePopoverWcController
              channelId="current_channel_id"
              currentTeamName="team1"
              dispatch={[Function]}
              isChannelAdmin={false}
              isTeamAdmin={false}
              src="/api/v4/users/4/image?_=0"
              triggerComponentClass="style--none btn-round"
              user={
                Object {
                  "first_name": "First4",
                  "id": "4",
                  "last_name": "Last4",
                  "nickname": "nickname4",
                  "username": "first.last4",
                }
              }
              userId="4"
              userStatus="offline"
            >
              <wc-contact-sheet
                background-color="transparent"
                class="style--none btn-round"
                is-external={false}
                k-chat-team-name="team1"
                k-chat-user-name="first.last4"
                presence="offline"
                prevent-open-on-hover={true}
                prevent-stop-propagation={true}
                size="md"
                src="/api/v4/users/4/image?_=0"
                user-name="First4 Last4"
              >
                <span
                  className="style--none btn-round"
                  slot="trigger"
                >
                  <WithTooltip
                    title="first.last4"
                  >
                    <Avatar
                      onBlur={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onMouseLeave={[Function]}
                      onMouseMove={[Function]}
                      onPointerDown={[Function]}
                      onPointerEnter={[Function]}
                      size="sm"
                      style={
                        Object {
                          "background": "rgb(240, 240, 241)",
                        }
                      }
                      tabIndex={-1}
                      url="/api/v4/users/4/image?_=0"
                    >
                      <img
                        alt="user profile image"
                        className="Avatar Avatar-sm"
                        loading="lazy"
                        onBlur={[Function]}
                        onError={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseMove={[Function]}
                        onPointerDown={[Function]}
                        onPointerEnter={[Function]}
                        src="/api/v4/users/4/image?_=0"
                        style={
                          Object {
                            "background": "rgb(240, 240, 241)",
                          }
                        }
                        tabIndex={-1}
                      />
                    </Avatar>
                  </WithTooltip>
                </span>
              </wc-contact-sheet>
            </ProfilePopoverWcController>
          </Connect(ProfilePopoverWcController)>
        </UserAvatar>
        <UserAvatar
          key="3"
          size="sm"
          style={
            Object {
              "background": "rgb(240, 240, 241)",
            }
          }
          userId="3"
        >
          <Connect(ProfilePopoverWcController)
            src="/api/v4/users/3/image?_=0"
            triggerComponentClass="style--none btn-round"
            userId="3"
          >
            <ProfilePopoverWcController
              channelId="current_channel_id"
              currentTeamName="team1"
              dispatch={[Function]}
              isChannelAdmin={false}
              isTeamAdmin={false}
              src="/api/v4/users/3/image?_=0"
              triggerComponentClass="style--none btn-round"
              user={
                Object {
                  "first_name": "First3",
                  "id": "3",
                  "last_name": "Last3",
                  "nickname": "nickname3",
                  "username": "first.last3",
                }
              }
              userId="3"
              userStatus="offline"
            >
              <wc-contact-sheet
                background-color="transparent"
                class="style--none btn-round"
                is-external={false}
                k-chat-team-name="team1"
                k-chat-user-name="first.last3"
                presence="offline"
                prevent-open-on-hover={true}
                prevent-stop-propagation={true}
                size="md"
                src="/api/v4/users/3/image?_=0"
                user-name="First3 Last3"
              >
                <span
                  className="style--none btn-round"
                  slot="trigger"
                >
                  <WithTooltip
                    title="first.last3"
                  >
                    <Avatar
                      onBlur={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onMouseLeave={[Function]}
                      onMouseMove={[Function]}
                      onPointerDown={[Function]}
                      onPointerEnter={[Function]}
                      size="sm"
                      style={
                        Object {
                          "background": "rgb(240, 240, 241)",
                        }
                      }
                      tabIndex={-1}
                      url="/api/v4/users/3/image?_=0"
                    >
                      <img
                        alt="user profile image"
                        className="Avatar Avatar-sm"
                        loading="lazy"
                        onBlur={[Function]}
                        onError={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseMove={[Function]}
                        onPointerDown={[Function]}
                        onPointerEnter={[Function]}
                        src="/api/v4/users/3/image?_=0"
                        style={
                          Object {
                            "background": "rgb(240, 240, 241)",
                          }
                        }
                        tabIndex={-1}
                      />
                    </Avatar>
                  </WithTooltip>
                </span>
              </wc-contact-sheet>
            </ProfilePopoverWcController>
          </Connect(ProfilePopoverWcController)>
        </UserAvatar>
        <WithTooltip
          title="first.last2, first.last1"
        >
          <Avatar
            onBlur={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onMouseLeave={[Function]}
            onMouseMove={[Function]}
            onPointerDown={[Function]}
            onPointerEnter={[Function]}
            size="sm"
            style={
              Object {
                "background": "rgb(240, 240, 241)",
              }
            }
            tabIndex={0}
            text="+2"
          >
            <div
              className="Avatar Avatar-sm Avatar-plain"
              data-content="+2"
              onBlur={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onMouseLeave={[Function]}
              onMouseMove={[Function]}
              onPointerDown={[Function]}
              onPointerEnter={[Function]}
              style={
                Object {
                  "background": "rgb(240, 240, 241)",
                }
              }
              tabIndex={0}
            />
          </Avatar>
        </WithTooltip>
      </div>
    </Memo(Avatars)>
    <Button
      className="ReplyButton separated"
      onClick={[Function]}
      prepend={
        <span
          className="icon"
        >
          <i
            className="icon-reply-outline"
          />
        </span>
      }
    >
      <button
        className="Button Button___transparent ReplyButton separated"
        onClick={[Function]}
      >
        <span
          className="Button_prepended"
        >
          <span
            className="icon"
          >
            <i
              className="icon-reply-outline"
            />
          </span>
        </span>
        <span
          className="Button_label"
        >
          <FormattedMessage
            defaultMessage="{totalReplies, plural, =0 {Reply} =1 {# reply} other {# replies}}"
            id="threading.numReplies"
            values={
              Object {
                "totalReplies": 9,
              }
            }
          >
            <span>
              9 replies
            </span>
          </FormattedMessage>
        </span>
      </button>
    </Button>
    <Memo(FollowButton)
      className="separated"
      isFollowing={true}
      onClick={[Function]}
    >
      <Button
        className="separated FollowButton"
        disabled={false}
        isActive={true}
        onClick={[Function]}
      >
        <button
          className="Button Button___transparent is-active separated FollowButton"
          disabled={false}
          onClick={[Function]}
        >
          <span
            className="Button_label"
          >
            Following
          </span>
        </button>
      </Button>
    </Memo(FollowButton)>
    <Connect(injectIntl(Timestamp))
      day="numeric"
      units={
        Array [
          "now",
          "minute",
          "hour",
          "day",
          "week",
        ]
      }
      useTime={false}
      value={1554161504000}
    >
      <injectIntl(Timestamp)
        day="numeric"
        dispatch={[Function]}
        hourCycle="h12"
        timeZone="UTC"
        units={
          Array [
            "now",
            "minute",
            "hour",
            "day",
            "week",
          ]
        }
        useTime={false}
        value={1554161504000}
      >
        <Timestamp
          day="numeric"
          dispatch={[Function]}
          hour="numeric"
          hourCycle="h12"
          intl={
            Object {
              "$t": [Function],
              "defaultFormats": Object {},
              "defaultLocale": "en",
              "defaultRichTextElements": undefined,
              "fallbackOnEmptyString": true,
              "formatDate": [Function],
              "formatDateTimeRange": [Function],
              "formatDateToParts": [Function],
              "formatDisplayName": [Function],
              "formatList": [Function],
              "formatListToParts": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatNumberToParts": [Function],
              "formatPlural": [Function],
              "formatRelativeTime": [Function],
              "formatTime": [Function],
              "formatTimeToParts": [Function],
              "formats": Object {},
              "formatters": Object {
                "getDateTimeFormat": [Function],
                "getDisplayNames": [Function],
                "getListFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralRules": [Function],
                "getRelativeTimeFormat": [Function],
              },
              "locale": "en",
              "messages": Object {},
              "onError": [Function],
              "onWarn": [Function],
              "textComponent": "span",
              "timeZone": "Etc/UTC",
              "wrapRichTextChunksInFragment": undefined,
            }
          }
          minute="numeric"
          month="long"
          numeric="auto"
          relNearest={1}
          second="numeric"
          style="long"
          timeZone="UTC"
          timeZoneName="short"
          units={
            Array [
              "now",
              "minute",
              "hour",
              "day",
              "week",
            ]
          }
          useTime={false}
          value={1554161504000}
          weekday="long"
          year="numeric"
        >
          <span
            className="Timestamp separated alt-visible"
          >
            <FormattedMessage
              defaultMessage="Last reply {formatted}"
              id="threading.footer.lastReplyAt"
              values={
                Object {
                  "formatted": <Memo(SemanticTime)
                    value={2019-04-01T23:31:44.000Z}
                  >
                    April 1, 2019
                  </Memo(SemanticTime)>,
                }
              }
            >
              <span>
                Last reply 
                <Memo(SemanticTime)
                  value={2019-04-01T23:31:44.000Z}
                >
                  <time
                    dateTime="2019-04-01T23:31:44.000"
                  >
                    April 1, 2019
                  </time>
                </Memo(SemanticTime)>
              </span>
            </FormattedMessage>
          </span>
        </Timestamp>
      </injectIntl(Timestamp)>
    </Connect(injectIntl(Timestamp))>
  </div>
</Memo(ThreadFooter)>
`;

exports[`components/threading/channel_threads/thread_footer should show unread indicator 1`] = `
<Memo(ThreadFooter)
  threadId="postthreadid"
>
  <div
    className="ThreadFooter"
  >
    <WithTooltip
      title={
        <Memo(MemoizedFormattedMessage)
          defaultMessage="{newReplies, plural, =0 {no unread messages} =1 {one unread message} other {# unread messages}}"
          id="threading.numNewMessages"
          values={
            Object {
              "newReplies": 2,
            }
          }
        />
      }
    >
      <div
        className="indicator"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseLeave={[Function]}
        onMouseMove={[Function]}
        onPointerDown={[Function]}
        onPointerEnter={[Function]}
        tabIndex={0}
      >
        <div
          className="dot-unreads"
        />
      </div>
    </WithTooltip>
    <Memo(Avatars)
      size="sm"
      userIds={
        Array [
          "5",
          "4",
          "3",
          "2",
          "1",
        ]
      }
    >
      <div
        className="Avatars Avatars___sm"
      >
        <UserAvatar
          key="5"
          size="sm"
          style={
            Object {
              "background": "rgb(240, 240, 241)",
            }
          }
          userId="5"
        >
          <Connect(ProfilePopoverWcController)
            src="/api/v4/users/5/image?_=0"
            triggerComponentClass="style--none btn-round"
            userId="5"
          >
            <ProfilePopoverWcController
              channelId="current_channel_id"
              currentTeamName="team1"
              dispatch={[Function]}
              isChannelAdmin={false}
              isTeamAdmin={false}
              src="/api/v4/users/5/image?_=0"
              triggerComponentClass="style--none btn-round"
              user={
                Object {
                  "first_name": "First5",
                  "id": "5",
                  "last_name": "Last5",
                  "nickname": "nickname5",
                  "username": "first.last5",
                }
              }
              userId="5"
              userStatus="offline"
            >
              <wc-contact-sheet
                background-color="transparent"
                class="style--none btn-round"
                is-external={false}
                k-chat-team-name="team1"
                k-chat-user-name="first.last5"
                presence="offline"
                prevent-open-on-hover={true}
                prevent-stop-propagation={true}
                size="md"
                src="/api/v4/users/5/image?_=0"
                user-name="First5 Last5"
              >
                <span
                  className="style--none btn-round"
                  slot="trigger"
                >
                  <WithTooltip
                    title="first.last5"
                  >
                    <Avatar
                      onBlur={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onMouseLeave={[Function]}
                      onMouseMove={[Function]}
                      onPointerDown={[Function]}
                      onPointerEnter={[Function]}
                      size="sm"
                      style={
                        Object {
                          "background": "rgb(240, 240, 241)",
                        }
                      }
                      tabIndex={-1}
                      url="/api/v4/users/5/image?_=0"
                    >
                      <img
                        alt="user profile image"
                        className="Avatar Avatar-sm"
                        loading="lazy"
                        onBlur={[Function]}
                        onError={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseMove={[Function]}
                        onPointerDown={[Function]}
                        onPointerEnter={[Function]}
                        src="/api/v4/users/5/image?_=0"
                        style={
                          Object {
                            "background": "rgb(240, 240, 241)",
                          }
                        }
                        tabIndex={-1}
                      />
                    </Avatar>
                  </WithTooltip>
                </span>
              </wc-contact-sheet>
            </ProfilePopoverWcController>
          </Connect(ProfilePopoverWcController)>
        </UserAvatar>
        <UserAvatar
          key="4"
          size="sm"
          style={
            Object {
              "background": "rgb(240, 240, 241)",
            }
          }
          userId="4"
        >
          <Connect(ProfilePopoverWcController)
            src="/api/v4/users/4/image?_=0"
            triggerComponentClass="style--none btn-round"
            userId="4"
          >
            <ProfilePopoverWcController
              channelId="current_channel_id"
              currentTeamName="team1"
              dispatch={[Function]}
              isChannelAdmin={false}
              isTeamAdmin={false}
              src="/api/v4/users/4/image?_=0"
              triggerComponentClass="style--none btn-round"
              user={
                Object {
                  "first_name": "First4",
                  "id": "4",
                  "last_name": "Last4",
                  "nickname": "nickname4",
                  "username": "first.last4",
                }
              }
              userId="4"
              userStatus="offline"
            >
              <wc-contact-sheet
                background-color="transparent"
                class="style--none btn-round"
                is-external={false}
                k-chat-team-name="team1"
                k-chat-user-name="first.last4"
                presence="offline"
                prevent-open-on-hover={true}
                prevent-stop-propagation={true}
                size="md"
                src="/api/v4/users/4/image?_=0"
                user-name="First4 Last4"
              >
                <span
                  className="style--none btn-round"
                  slot="trigger"
                >
                  <WithTooltip
                    title="first.last4"
                  >
                    <Avatar
                      onBlur={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onMouseLeave={[Function]}
                      onMouseMove={[Function]}
                      onPointerDown={[Function]}
                      onPointerEnter={[Function]}
                      size="sm"
                      style={
                        Object {
                          "background": "rgb(240, 240, 241)",
                        }
                      }
                      tabIndex={-1}
                      url="/api/v4/users/4/image?_=0"
                    >
                      <img
                        alt="user profile image"
                        className="Avatar Avatar-sm"
                        loading="lazy"
                        onBlur={[Function]}
                        onError={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseMove={[Function]}
                        onPointerDown={[Function]}
                        onPointerEnter={[Function]}
                        src="/api/v4/users/4/image?_=0"
                        style={
                          Object {
                            "background": "rgb(240, 240, 241)",
                          }
                        }
                        tabIndex={-1}
                      />
                    </Avatar>
                  </WithTooltip>
                </span>
              </wc-contact-sheet>
            </ProfilePopoverWcController>
          </Connect(ProfilePopoverWcController)>
        </UserAvatar>
        <UserAvatar
          key="3"
          size="sm"
          style={
            Object {
              "background": "rgb(240, 240, 241)",
            }
          }
          userId="3"
        >
          <Connect(ProfilePopoverWcController)
            src="/api/v4/users/3/image?_=0"
            triggerComponentClass="style--none btn-round"
            userId="3"
          >
            <ProfilePopoverWcController
              channelId="current_channel_id"
              currentTeamName="team1"
              dispatch={[Function]}
              isChannelAdmin={false}
              isTeamAdmin={false}
              src="/api/v4/users/3/image?_=0"
              triggerComponentClass="style--none btn-round"
              user={
                Object {
                  "first_name": "First3",
                  "id": "3",
                  "last_name": "Last3",
                  "nickname": "nickname3",
                  "username": "first.last3",
                }
              }
              userId="3"
              userStatus="offline"
            >
              <wc-contact-sheet
                background-color="transparent"
                class="style--none btn-round"
                is-external={false}
                k-chat-team-name="team1"
                k-chat-user-name="first.last3"
                presence="offline"
                prevent-open-on-hover={true}
                prevent-stop-propagation={true}
                size="md"
                src="/api/v4/users/3/image?_=0"
                user-name="First3 Last3"
              >
                <span
                  className="style--none btn-round"
                  slot="trigger"
                >
                  <WithTooltip
                    title="first.last3"
                  >
                    <Avatar
                      onBlur={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onMouseLeave={[Function]}
                      onMouseMove={[Function]}
                      onPointerDown={[Function]}
                      onPointerEnter={[Function]}
                      size="sm"
                      style={
                        Object {
                          "background": "rgb(240, 240, 241)",
                        }
                      }
                      tabIndex={-1}
                      url="/api/v4/users/3/image?_=0"
                    >
                      <img
                        alt="user profile image"
                        className="Avatar Avatar-sm"
                        loading="lazy"
                        onBlur={[Function]}
                        onError={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseMove={[Function]}
                        onPointerDown={[Function]}
                        onPointerEnter={[Function]}
                        src="/api/v4/users/3/image?_=0"
                        style={
                          Object {
                            "background": "rgb(240, 240, 241)",
                          }
                        }
                        tabIndex={-1}
                      />
                    </Avatar>
                  </WithTooltip>
                </span>
              </wc-contact-sheet>
            </ProfilePopoverWcController>
          </Connect(ProfilePopoverWcController)>
        </UserAvatar>
        <WithTooltip
          title="first.last2, first.last1"
        >
          <Avatar
            onBlur={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onMouseLeave={[Function]}
            onMouseMove={[Function]}
            onPointerDown={[Function]}
            onPointerEnter={[Function]}
            size="sm"
            style={
              Object {
                "background": "rgb(240, 240, 241)",
              }
            }
            tabIndex={0}
            text="+2"
          >
            <div
              className="Avatar Avatar-sm Avatar-plain"
              data-content="+2"
              onBlur={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onMouseLeave={[Function]}
              onMouseMove={[Function]}
              onPointerDown={[Function]}
              onPointerEnter={[Function]}
              style={
                Object {
                  "background": "rgb(240, 240, 241)",
                }
              }
              tabIndex={0}
            />
          </Avatar>
        </WithTooltip>
      </div>
    </Memo(Avatars)>
    <Button
      className="ReplyButton separated"
      onClick={[Function]}
      prepend={
        <span
          className="icon"
        >
          <i
            className="icon-reply-outline"
          />
        </span>
      }
    >
      <button
        className="Button Button___transparent ReplyButton separated"
        onClick={[Function]}
      >
        <span
          className="Button_prepended"
        >
          <span
            className="icon"
          >
            <i
              className="icon-reply-outline"
            />
          </span>
        </span>
        <span
          className="Button_label"
        >
          <FormattedMessage
            defaultMessage="{totalReplies, plural, =0 {Reply} =1 {# reply} other {# replies}}"
            id="threading.numReplies"
            values={
              Object {
                "totalReplies": 9,
              }
            }
          >
            <span>
              9 replies
            </span>
          </FormattedMessage>
        </span>
      </button>
    </Button>
    <Memo(FollowButton)
      className="separated"
      isFollowing={true}
      onClick={[Function]}
    >
      <Button
        className="separated FollowButton"
        disabled={false}
        isActive={true}
        onClick={[Function]}
      >
        <button
          className="Button Button___transparent is-active separated FollowButton"
          disabled={false}
          onClick={[Function]}
        >
          <span
            className="Button_label"
          >
            Following
          </span>
        </button>
      </Button>
    </Memo(FollowButton)>
    <Connect(injectIntl(Timestamp))
      day="numeric"
      units={
        Array [
          "now",
          "minute",
          "hour",
          "day",
          "week",
        ]
      }
      useTime={false}
      value={1554161504000}
    >
      <injectIntl(Timestamp)
        day="numeric"
        dispatch={[Function]}
        hourCycle="h12"
        timeZone="UTC"
        units={
          Array [
            "now",
            "minute",
            "hour",
            "day",
            "week",
          ]
        }
        useTime={false}
        value={1554161504000}
      >
        <Timestamp
          day="numeric"
          dispatch={[Function]}
          hour="numeric"
          hourCycle="h12"
          intl={
            Object {
              "$t": [Function],
              "defaultFormats": Object {},
              "defaultLocale": "en",
              "defaultRichTextElements": undefined,
              "fallbackOnEmptyString": true,
              "formatDate": [Function],
              "formatDateTimeRange": [Function],
              "formatDateToParts": [Function],
              "formatDisplayName": [Function],
              "formatList": [Function],
              "formatListToParts": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatNumberToParts": [Function],
              "formatPlural": [Function],
              "formatRelativeTime": [Function],
              "formatTime": [Function],
              "formatTimeToParts": [Function],
              "formats": Object {},
              "formatters": Object {
                "getDateTimeFormat": [Function],
                "getDisplayNames": [Function],
                "getListFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralRules": [Function],
                "getRelativeTimeFormat": [Function],
              },
              "locale": "en",
              "messages": Object {},
              "onError": [Function],
              "onWarn": [Function],
              "textComponent": "span",
              "timeZone": "Etc/UTC",
              "wrapRichTextChunksInFragment": undefined,
            }
          }
          minute="numeric"
          month="long"
          numeric="auto"
          relNearest={1}
          second="numeric"
          style="long"
          timeZone="UTC"
          timeZoneName="short"
          units={
            Array [
              "now",
              "minute",
              "hour",
              "day",
              "week",
            ]
          }
          useTime={false}
          value={1554161504000}
          weekday="long"
          year="numeric"
        >
          <span
            className="Timestamp separated alt-visible"
          >
            <FormattedMessage
              defaultMessage="Last reply {formatted}"
              id="threading.footer.lastReplyAt"
              values={
                Object {
                  "formatted": <Memo(SemanticTime)
                    value={2019-04-01T23:31:44.000Z}
                  >
                    April 1, 2019
                  </Memo(SemanticTime)>,
                }
              }
            >
              <span>
                Last reply 
                <Memo(SemanticTime)
                  value={2019-04-01T23:31:44.000Z}
                >
                  <time
                    dateTime="2019-04-01T23:31:44.000"
                  >
                    April 1, 2019
                  </time>
                </Memo(SemanticTime)>
              </span>
            </FormattedMessage>
          </span>
        </Timestamp>
      </injectIntl(Timestamp)>
    </Connect(injectIntl(Timestamp))>
  </div>
</Memo(ThreadFooter)>
`;

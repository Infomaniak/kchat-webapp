include:
  # - template: Security/SAST.gitlab-ci.yml
  # - template: Security/Container-Scanning.gitlab-ci.yml
  # - template: Code-Quality.gitlab-ci.yml
  - project: 'docker-public/gitlab-triage'
    ref: master
    file: '/gitlab-triage.yaml'

variables:
  SAST_DISABLED: "true"
  WEEKLY_NOTIFY_CHANNEL: ${KCHAT_WHOOK_URL}/994e7a29-4b7f-4fd5-a194-5eea8ac49bc2

stages:
  - test
  - build
  - release

workflow:
  rules:
    - if: "$CI_COMMIT_TAG =~ /\\-rc.*/"
      variables:
        DEPLOY_VARIABLE: preprod
        # NOTIFY_CHANNEL: ${KCHAT_WHOOK_URL}/986f3435-6c53-4648-a86c-33c64fc14daf
        NOTIFY_CHANNEL: ${KCHAT_WHOOK_URL}/998e74a5-86f9-40ca-99bc-75fd53387bae
    - if: "$CI_COMMIT_TAG =~ /\\-next.*/"
      variables:
        DEPLOY_VARIABLE: canary
        # NOTIFY_CHANNEL: ${KCHAT_WHOOK_URL}/986f3435-6c53-4648-a86c-33c64fc14daf
        NOTIFY_CHANNEL: ${KCHAT_WHOOK_URL}/998e74a5-86f9-40ca-99bc-75fd53387bae
    - if: "$CI_COMMIT_TAG"
      variables:
        DEPLOY_VARIABLE: prod
        NOTIFY_CHANNEL: ${KCHAT_WHOOK_URL}/986f3435-6c53-4648-a86c-33c64fc14daf
    - if: $CI_COMMIT_BRANCH == "master"
      variables:
        DEPLOY_VARIABLE: prodsec
    - if: "$CI_MERGE_REQUEST_ID"
      variables:
        DEPLOY_VARIABLE: "staging/${CI_COMMIT_REF_SLUG}"
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - when: never

build_docker_image:
  stage: release
  tags:
    - kubernetes
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint:
      - ''
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
      allow_failure: false
    - when: never
  before_script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"},\"$CI_DEPENDENCY_PROXY_SERVER\":{\"username\":\"$CI_DEPENDENCY_PROXY_USER\",\"password\":\"$CI_DEPENDENCY_PROXY_PASSWORD\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor
      --cache=true
      --context ${CI_PROJECT_DIR}
      --dockerfile ${CI_PROJECT_DIR}/Dockerfile
      --destination ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}

build_front:
  stage: build
  image: node:18.15.0
  tags:
    - kubernetes
  rules:
    - if: $DEPLOY_VARIABLE == "prod"
      when: on_success
      allow_failure: false
    - if: $DEPLOY_VARIABLE == "canary"
      when: on_success
      allow_failure: false
    - if: $DEPLOY_VARIABLE == "preprod"
      when: on_success
    - if: $DEPLOY_VARIABLE == "staging/${CI_COMMIT_REF_SLUG}"
      when: on_success
    - when: never
  environment:
    name: "$DEPLOY_VARIABLE"
  before_script:
    - export ENVIRONMENT=${DEPLOY_VARIABLE}
  script:
    - yarn --silent
    - yarn workspace @infomaniak/mattermost-types build
    - yarn workspace @infomaniak/mattermost-client build
    - yarn workspace @mattermost/components build
    - yarn build:webapp
  artifacts:
    paths:
      - dist
    expire_in: 1 days
    when: always

publish_packages:
  stage: build
  image: node:18.15.0
  tags:
    - kubernetes
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: $DEPLOY_VARIABLE == "prodsec"
      when: on_success
    - when: never
  environment:
    name: "$DEPLOY_VARIABLE"
  script:
    - yarn --silent
    - yarn workspace @infomaniak/mattermost-types build
    - yarn workspace @infomaniak/mattermost-client build
    - yarn config set npmPublishRegistry https://verdaccio.dev.infomaniak.ch
    - yarn config set 'npmRegistries["//verdaccio.dev.infomaniak.ch"].npmAuthToken' "$VERDACCIO_TOKEN"
    - yarn config set 'npmRegistries["//verdaccio.dev.infomaniak.ch"].npmAlwaysAuth' true
    - yarn config set npmScopes.infomaniak.npmRegistryServer https://verdaccio.dev.infomaniak.ch
    - yarn config set npmScopes.infomaniak.npmPublishRegistry https://verdaccio.dev.infomaniak.ch
    - yarn config set npmScopes.infomaniak.npmAuthToken "$VERDACCIO_TOKEN"
    - yarn workspace @infomaniak/mattermost-types npm publish
    - yarn workspace @infomaniak/mattermost-client npm publish


publish_front:
  stage: release
  tags:
    - kubernetes
  image:
    name: minio/mc:RELEASE.2022-11-07T23-47-39Z
    entrypoint: [ '' ]
  rules:
    - if: $DEPLOY_VARIABLE == "prod"
      when: on_success
      allow_failure: false
    - if: $DEPLOY_VARIABLE == "canary"
      when: on_success
      allow_failure: false
    - if: $DEPLOY_VARIABLE == "preprod"
      when: on_success
    - if: $DEPLOY_VARIABLE == "staging/${CI_COMMIT_REF_SLUG}"
      when: on_success
    - when: never
  environment:
    name: "$DEPLOY_VARIABLE"
  before_script:
    - mc config host add $S3_BUCKET $S3_HOST $S3_KEY $S3_PASSWORD --api s3v4
  script:
    - mc cp --recursive dist/ $S3_BUCKET/$S3_BUCKET/kchat/$DEPLOY_VARIABLE
  after_script:
    - mc rm --recursive --force --older-than 30d $S3_BUCKET/$S3_BUCKET/kchat/staging
    - mc rm --recursive --force --older-than 30d $S3_BUCKET/$S3_BUCKET/kchat/preprod
  artifacts:
    paths:
      - dist
    expire_in: 1 days
    when: always

# unit_test:
#   stage: test
#   image: node:18.15.0
#   tags:
#     - docker-executor
#     - kubernetes
#     - shared
#   environment:
#     name: "$DEPLOY_VARIABLE"
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "schedule"'
#       when: never
#     - if: $DEPLOY_VARIABLE == "staging/${CI_COMMIT_REF_SLUG}"
#       when: on_success
#     - if: $DEPLOY_VARIABLE == "prodsec"
#       when: on_success
#     - when: never
#   artifacts:
#     paths:
#       - coverage/
#     when: on_success
#     reports:
#       junit: coverage/junit.xml
#       coverage_report:
#         coverage_format: cobertura
#         path: coverage/cobertura-coverage.xml
#   coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
#   cache:
#     paths:
#       - .jestcache
#   before_script:
#     - yarn --silent
#   script:
#     - yarn test:webapp


sentry_release:
  stage: .post
  image: getsentry/sentry-cli:2.17.1
  needs:
    - build_front
  environment:
    name: "$DEPLOY_VARIABLE"
  rules:
    - if: $DEPLOY_VARIABLE == "prod"
      when: on_success
      allow_failure: false
    - if: $DEPLOY_VARIABLE == "canary"
      when: on_success
      allow_failure: false
    - if: $DEPLOY_VARIABLE == "preprod"
      when: on_success
      allow_failure: false
    - when: never
  tags:
    - docker-executor
    - kubernetes
    - shared
  script:
    - sentry-cli releases new ${CI_COMMIT_TAG}
    - sentry-cli releases set-commits --auto --ignore-empty --ignore-missing ${CI_COMMIT_TAG}
    - sentry-cli releases files ${CI_COMMIT_TAG} upload-sourcemaps --url-prefix '~/static/' ./dist --ignore-file .sentryignore
    - sentry-cli releases finalize ${CI_COMMIT_TAG}

changelog:
  stage: release
  image: ruby:latest
  needs:
    - publish_front
  environment:
    name: "$DEPLOY_VARIABLE"
  rules:
    - if: $DEPLOY_VARIABLE == "prod"
      when: on_success
    - if: $DEPLOY_VARIABLE == "canary"
      when: on_success
    - if: $DEPLOY_VARIABLE == "preprod"
      when: on_success
    - when: never
  script:
    - ruby .gitlab/release.rb ${CI_COMMIT_TAG} ${CI_COMMIT_TAG:0:3} ${NOTIFY_CHANNEL}

guild_review:
  image: ruby:latest
  script:
    - ruby .gitlab/mr_review.rb
  rules:
    - if: '$MR_REVIEW_SCHEDULE'
      when: on_success
    - when: never

gitlab_triage:
  rules:
    - if: '$GITLAB_TRIAGE'
      when: on_success
    - when: never
  variables:
    TRIAGE_POLICY_FILE: .gitlab/triage-policies.yml

technical_debt:
  extends: gitlab_triage
  rules:
    - if: '$TRIAGE_TECHNICAL_DEBT'
      when: on_success
    - when: never
  variables:
    TRIAGE_POLICY_FILE: .gitlab/summaries-technical-debt.yml

stages:
  - build
  - test
  - release

include:
  # - template: Security/SAST.gitlab-ci.yml
  # - template: Security/Container-Scanning.gitlab-ci.yml
  # - template: Code-Quality.gitlab-ci.yml
  - project: "docker-public/gitlab-triage"
    ref: master
    file: "/gitlab-triage.yaml"

variables:
  # Required CI/CD variables
  # KCHAT_WHOOK_URL
  # S3_BUCKET
  # S3_HOST
  # S3_KEY
  # S3_PASSWORD
  # VERDACCIO_TOKEN
  # GITLAB_TRIAGE
  # MR_REVIEW_SCHEDULE
  # TRIAGE_TECHNICAL_DEBT
  # ---
  KANIKO_VERSION: "debug" # https://github.com/GoogleContainerTools/kaniko/releases
  MINIO_CLIENT_VERSION: "RELEASE.2022-11-07T23-47-39Z" # https://hub.docker.com/r/minio/mc/tags
  NODE_VERSION: 18.17.1 # Sould respect /.nvmrc
  SENTRY_VERSION: 2.17.1 # https://hub.docker.com/r/getsentry/sentry-cli/tags
  RUBY_VERSION: 3.3.1 # https://hub.docker.com/_/ruby/tags
  # SAST_DISABLED: "true"
  NOTIFY_CHANNEL: ${KCHAT_WHOOK_URL}/986f3435-6c53-4648-a86c-33c64fc14daf

# REFERENCES
# Preprod deployments when there is a tag ending with "-rc.[...]"
.rule-preprod: &rule-preprod
  - if: &if-preprod "$CI_COMMIT_TAG =~ /\\-rc.*/"
    when: on_success

# Canary deployments when there is a tag ending with "-next.[...]"
.rule-canary: &rule-canary
  - if: &if-canary "$CI_COMMIT_TAG =~ /\\-next.*/"
    when: on_success
    allow_failure: false

# Prod deployments are triggered as a fallback when neither "Preprod" nor "Canary" was triggered
.rule-prod: &rule-prod
  - if: &if-tag "$CI_COMMIT_TAG"
    when: on_success
    allow_failure: false

# Prodsec deployments on master commits
.rule-prodsec: &rule-prodsec
  - if: &if-master-commit $CI_COMMIT_BRANCH == "master"
    when: on_success

# Staging deployments on Merge Requests
.rule-staging: &rule-staging
  - if: &if-merge-request "$CI_MERGE_REQUEST_ID"
    when: on_success

# Scheduled jobs
.rule-scheduled: &rule-scheduled
  - if: &rule-scheduled '$CI_PIPELINE_SOURCE == "schedule"'
    when: on_success
.rule-not-scheduled: &rule-not-scheduled
  - if: *rule-scheduled
    when: never

# Configure yarn cache and extra npm registries
.script-configure-yarn: &script-configure-yarn
  - yarn config set cacheFolder .yarn-cache
  # - |
  #   yarn config set cacheFolder .yarn-cache \
  #   && yarn config set npmPublishRegistry https://verdaccio.dev.infomaniak.ch \
  #   && yarn config set 'npmRegistries["//verdaccio.dev.infomaniak.ch"].npmAlwaysAuth' true \
  #   && yarn config set 'npmRegistries["//verdaccio.dev.infomaniak.ch"].npmAuthToken' "$VERDACCIO_TOKEN" \
  #   && yarn config set npmScopes.infomaniak.npmAuthToken "$VERDACCIO_TOKEN" \
  #   && yarn config set npmScopes.infomaniak.npmPublishRegistry https://verdaccio.dev.infomaniak.ch \
  #   && yarn config set npmScopes.infomaniak.npmRegistryServer https://verdaccio.dev.infomaniak.ch

# Configure yarn and install dependencies
.script-yarn-install: &script-yarn-install
  - *script-configure-yarn
  - yarn --silent

# Cache for yarn dependencies
.cache-yarn: &cache-yarn
  - key:
      files:
        - yarn.lock
    paths:
      - .yarn-cache/

# Cache for jest
.cache-jest: &cache-jest
  - paths:
      - webapp/channels/.jestcache

# WORKFLOW
# Setup environment specific variables
# Ref https://docs.gitlab.com/ee/ci/yaml/#workflowrulesvariables
workflow:
  rules:
    - if: *if-preprod
      variables:
        ENVIRONMENT_NAME: preprod
    - if: *if-canary
      variables:
        ENVIRONMENT_NAME: canary
    - if: *if-tag
      variables:
        ENVIRONMENT_NAME: prod
    - if: *if-master-commit
      variables:
        ENVIRONMENT_NAME: prodsec
    - if: *if-merge-request
      variables:
        ENVIRONMENT_NAME: "staging/${CI_COMMIT_REF_SLUG}"
    - when: never

# STAGES
# Build front sources using node and store the bundle as an artifact
build:front:
  stage: build
  image: node:${NODE_VERSION}
  tags:
    - kubernetes
  rules:
    - *rule-preprod
    - *rule-canary
    - *rule-prod
    - *rule-staging
    - when: never
  environment:
    name: "$ENVIRONMENT_NAME"
  before_script:
    - *script-yarn-install
  script:
    # Build dependencies
    - yarn workspace @infomaniak/mattermost-types build
    - yarn workspace @infomaniak/mattermost-client build
    - yarn workspace @mattermost/components build
    # Build main
    - yarn build:webapp
  cache:
    - *cache-yarn
  # Save bundle /dist
  artifacts:
    paths:
      - dist
    expire_in: 1 days
    when: always

# Build mono-repo/internal dependencies
# build:packages:
#   stage: release
#   image: node:${NODE_VERSION}
#   extends:
#     - .yarn-cache
#   tags:
#     - kubernetes
#   rules:
#     - *rule-not-scheduled
#     - *rule-prodsec
#     - when: never
#   environment:
#     name: "$ENVIRONMENT_NAME"
#   before_script:
#     - *script-yarn-install
#   script:
#     - yarn workspace @infomaniak/mattermost-types build
#     - yarn workspace @infomaniak/mattermost-client build
#     - yarn workspace @mattermost/components build
#   cache:
#     - *cache-yarn
#   # Save tsc'ed javascript files /lib
#   artifacts:
#     paths:
#       - webapp/platform/client/lib
#       - webapp/platform/types/lib
#       # TODO: save @mattermost/components ?
#     expire_in: 1 days
#     when: always

# Build front using kaniko and store the image in the gitlab registry
build:image:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:${KANIKO_VERSION}
    entrypoint: [""]
  tags:
    - kubernetes
  rules:
    - if: *if-tag
      when: manual
      allow_failure: false
    - when: never
  before_script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"},\"$CI_DEPENDENCY_PROXY_SERVER\":{\"username\":\"$CI_DEPENDENCY_PROXY_USER\",\"password\":\"$CI_DEPENDENCY_PROXY_PASSWORD\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor
      --cache=true
      --context ${CI_PROJECT_DIR}
      --dockerfile ${CI_PROJECT_DIR}/Dockerfile
      --destination ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}

# Execute unit tests
test:unit:
  stage: test
  image: node:${NODE_VERSION}
  tags:
    - docker-executor
    - kubernetes
    - shared
  rules:
    - *rule-not-scheduled # Job is not triggered by schedule
    - *rule-staging
    - *rule-prodsec
    - when: never
  environment:
    name: "$ENVIRONMENT_NAME"
  before_script:
    - *script-yarn-install
  script:
    - yarn test:webapp
  # Save coverage report
  artifacts:
    paths:
      - webapp/channels/coverage/
    when: on_success
    reports:
      junit: webapp/channels/coverage/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: webapp/channels/coverage/cobertura-coverage.xml
  coverage: /Lines\s*:\s*(\d+.?\d*)%/
  # Save jest/yarn cache
  cache:
    - *cache-jest
    - *cache-yarn

# Execute e2e tests
test:e2e:
  stage: test
  image: node:${NODE_VERSION}
  tags:
    - docker-executor
    - kubernetes
    - shared
  rules:
    - *rule-not-scheduled # Job is not triggered by schedule
    - *rule-staging
    - *rule-prodsec
    - when: never
  environment:
    name: "$ENVIRONMENT_NAME"
  before_script:
    - *script-yarn-install
  script:
    - yarn test:e2e
  # Save jest/yarn cache
  cache:
    - *cache-jest
    - *cache-yarn

# Update front using minio-client
release:front:
  stage: release
  image:
    name: minio/mc:${MINIO_CLIENT_VERSION}
    entrypoint: [""]
  tags:
    - kubernetes
  needs:
    - build:front
  rules:
    - *rule-preprod
    - *rule-canary
    - *rule-prod
    - *rule-staging
    - when: never
  environment:
    name: "$ENVIRONMENT_NAME"
  before_script:
    - mc config host add $S3_BUCKET $S3_HOST $S3_KEY $S3_PASSWORD --api s3v4
  script:
    - mc cp --recursive dist/ $S3_BUCKET/$S3_BUCKET/kchat/$ENVIRONMENT_NAME
  after_script:
    - mc rm --recursive --force --older-than 30d $S3_BUCKET/$S3_BUCKET/kchat/staging
    - mc rm --recursive --force --older-than 30d $S3_BUCKET/$S3_BUCKET/kchat/preprod

# Publish mono-repo/internal dependencies
# release:packages:
#   stage: release
#   image: node:${NODE_VERSION}
#   tags:
#     - kubernetes
#   needs:
#     - build:packages
#   rules:
#     - *rule-not-scheduled
#     - *rule-prodsec
#     - when: never
#   environment:
#     name: "$ENVIRONMENT_NAME"
#   script:
#     - yarn config set npmPublishRegistry https://verdaccio.dev.infomaniak.ch
#     - yarn config set 'npmRegistries["//verdaccio.dev.infomaniak.ch"].npmAuthToken' "$VERDACCIO_TOKEN"
#     - yarn config set 'npmRegistries["//verdaccio.dev.infomaniak.ch"].npmAlwaysAuth' true
#     - yarn config set npmScopes.infomaniak.npmRegistryServer https://verdaccio.dev.infomaniak.ch
#     - yarn config set npmScopes.infomaniak.npmPublishRegistry https://verdaccio.dev.infomaniak.ch
#     - yarn config set npmScopes.infomaniak.npmAuthToken "$VERDACCIO_TOKEN"
#     - yarn workspace @infomaniak/mattermost-types npm publish
#     - yarn workspace @infomaniak/mattermost-client npm publish

# Create a new sentry release and push source maps
release:sentry:
  stage: release
  image: getsentry/sentry-cli:${SENTRY_VERSION}
  tags:
    - docker-executor
    - kubernetes
    - shared
  needs:
    - build:front
  rules:
    - *rule-preprod
    - *rule-canary
    - *rule-prod
    - when: never
  environment:
    name: "$ENVIRONMENT_NAME"
  script:
    - sentry-cli releases new ${CI_COMMIT_TAG}
    - sentry-cli releases set-commits --auto --ignore-empty --ignore-missing ${CI_COMMIT_TAG}
    - sentry-cli releases files ${CI_COMMIT_TAG} upload-sourcemaps --url-prefix '~/static/' ./dist --ignore-file .sentryignore
    - sentry-cli releases finalize ${CI_COMMIT_TAG}

# Publish changelog to kChat
release:changelog:
  stage: release
  image: ruby:${RUBY_VERSION}
  needs:
    - release:front
  rules:
    - *rule-preprod
    - *rule-canary
    - *rule-prod
    - when: never
  environment:
    name: "$ENVIRONMENT_NAME"
  script:
    - ruby .gitlab/release.rb ${CI_COMMIT_TAG} ${CI_COMMIT_TAG:0:3} ${NOTIFY_CHANNEL}

# HOUSE KEEPING
guild_review:
  image: ruby:${RUBY_VERSION}
  rules:
    - if: "$MR_REVIEW_SCHEDULE"
      when: on_success
    - when: never
  script:
    - ruby .gitlab/mr_review.rb

gitlab_triage:
  rules:
    - if: "$GITLAB_TRIAGE"
      when: on_success
    - when: never
  variables:
    TRIAGE_POLICY_FILE: .gitlab/triage-policies.yml

technical_debt:
  extends: gitlab_triage
  rules:
    - if: "$TRIAGE_TECHNICAL_DEBT"
      when: on_success
    - when: never
  variables:
    TRIAGE_POLICY_FILE: .gitlab/summaries-technical-debt.yml
